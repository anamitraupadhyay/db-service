defmodule DbserviceWeb.SessionController do
  use DbserviceWeb, :controller

  alias Dbservice.Sessions
  alias Dbservice.Sessions.Session

  action_fallback DbserviceWeb.FallbackController

  use PhoenixSwagger

  def swagger_definitions do
    %{
      Session:
        swagger_schema do
          title("Session")
          description("A session in the application")

          properties do
            name(:string, "First name")
            platform(:string, "Platform where session being hosted")
            platform_link(:string, "Link for the platform")
            portal_link(:text, "Link generated by the portal")
            start_time(:timestamp, "Session start time")
            end_time(:timestamp, "Session finish time")
            repeat_type(:string, "Repeat type for the session")
            repeat_till_date(:timestamp, "Date till ")
            meta_data(:map, "Additional meta data for the session")
            owner_id(:integer, "User ID for the session owner")
            created_by_id(:integer, "User ID for the session creator")
            is_active(:boolean, "Tells whether session is active or not")
            uuid(:string, "Uuid for the session")
          end

          example(%{
            name: "Kendriya Vidyalaya - Weekly Maths class 7",
            platform: "meet",
            platform_link: "https://meet.google.com/asl-skas-qwe",
            portal_link: "https://links.af.org/kv-wmc7",
            start_time: "2022-02-02T11:00:00Z",
            end_time: "2022-02-02T11:30:00Z",
            repeat_type: "weekly",
            repeat_till_date: "2022-12-31T11:59:59Z",
            meta_data: %{
              "substitute-teacher-name" => "Ms. Poonam",
            },
            owner_id: 2,
            created_by_id: 1,
            is_active: true,
            uuid: "uiqweopasdflkasdfj",
          })
        end,
      Sessions:
        swagger_schema do
          title("Sessions")
          description("All the sessions")
          type(:array)
          items(Schema.ref(:Session))
        end,
      BatchIds:
        swagger_schema do
          properties do
            batch_ids(:array, "List of batch ids")
          end

          example(%{
            batch_ids: [1, 2]
          })
        end
    }
  end

  swagger_path :index do
    get("/api/session")
    response(200, "OK", Schema.ref(:Sessions))
  end

  def index(conn, _params) do
    session = Sessions.list_session()
    render(conn, "index.json", session: session)
  end

  swagger_path :create do
    post("/api/session")

    parameters do
      body(:body, Schema.ref(:Session), "Session to create", required: true)
    end

    response(201, "Created", Schema.ref(:Session))
  end

  def create(conn, params) do
    with {:ok, %Session{} = session} <- Sessions.create_session(params) do
      conn
      |> put_status(:created)
      |> put_resp_header("location", Routes.session_path(conn, :show, session))
      |> render("show.json", session: session)
    end
  end

  swagger_path :show do
    get("/api/session/{sessionId}")

    parameters do
      sessionId(:path, :integer, "The id of the session", required: true)
    end

    response(200, "OK", Schema.ref(:Session))
  end

  def show(conn, %{"id" => id}) do
    session = Sessions.get_session!(id)
    render(conn, "show.json", session: session)
  end

  swagger_path :update do
    patch("/api/session/{sessionId}")

    parameters do
      sessionId(:path, :integer, "The id of the session", required: true)
      body(:body, Schema.ref(:Session), "Session to create", required: true)
    end

    response(200, "Updated", Schema.ref(:Session))
  end

  def update(conn, params) do
    session = Sessions.get_session!(params["id"])

    with {:ok, %Session{} = session} <- Sessions.update_session(session, params) do
      render(conn, "show.json", session: session)
    end
  end

  swagger_path :delete do
    PhoenixSwagger.Path.delete("/api/session/{sessionId}")

    parameters do
      sessionId(:path, :integer, "The id of the session", required: true)
    end

    response(204, "No Content")
  end

  def delete(conn, %{"id" => id}) do
    session = Sessions.get_session!(id)

    with {:ok, %Session{}} <- Sessions.delete_session(session) do
      send_resp(conn, :no_content, "")
    end
  end

  swagger_path :update_batches do
    post("/api/session/{sessionId}/update-batches")

    parameters do
      sessionId(:path, :integer, "The id of the session", required: true)
      body(:body, Schema.ref(:BatchIds), "List of batch ids to update for the session", required: true)
    end

    response(200, "OK", Schema.ref(:Session))
  end

  def update_batches(conn, %{"id" => session_id, "batch_ids" => batch_ids})
      when is_list(batch_ids) do
    with {:ok, %Session{} = session} <- Sessions.update_batches(session_id, batch_ids) do
      render(conn, "show.json", session: session)
    end
  end
end
